openapi: 3.1.3
info:
  title: ToDo List API - OpenAPI 3.0
  description: |-
    ToDoリストのAPIです。
  version: 1.0.11
tags:
  - name: user
    description: ユーザーに関する操作
  - name: board
    description: タスクを束ねるボードに関する操作
  - name: task
    description: タスクに関する操作
paths:
  /api/boards:
    get:
      tags:
        - user
      summary: ユーザーが所有する全てのボードを取得
      description: ボードを取得する
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'

  /api/board/create:
    post:
      tags:
        - user
      summary: ボードの新規作成
      description: ボードの新規作成
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
        required: true
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'

  /api/board/{board}:
    get:
      tags:
        - board
      summary: ボード情報を取得する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
    put:
      tags:
        - board
      summary: ボード情報の更新
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      requestBody:
        description: ボード情報を送信する
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
    delete:
      tags:
        - board
      summary: ボードの削除
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'

  /api/board/{board}/tasks:
    get:
      tags:
        - board
      summary: ボード内の全てのタスクを取得する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /api/board/{board}/task/create:
    post:
      tags:
        - board
      summary: タスクの新規作成
      description: タスクの新規作成
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      requestBody:
        description: タスクの新規作成
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/board/{board}/trash:
    get:
      tags:
        - board
      summary: ボード内の論理削除されたタスクを全て取得する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /api/board/{board}/task/{task}:
    get:
      tags:
        - task
      summary: タスクを取得する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
        - in: path
          name: task
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      tags:
        - task
      summary: タスクを更新する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
        - in: path
          name: task
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    delete:
      tags:
        - task
      summary: ボードの削除
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
        - in: path
          name: task
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/board/{board}/trash/task/{task}:
    get:
      tags:
        - task
      summary: 論理削除されたタスクを取得する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
        - in: path
          name: task
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/board/{board}/trash/task/{task}/restore:
    patch:
      tags:
        - task
      summary: 論理削除されたタスクを復元する
      parameters:
        - in: path
          name: board
          description: ボードID
          required: true
          schema:
            type: integer
        - in: path
          name: task
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        title:
          type: string
          example: 機能を実装する
        content:
          type: string
          example: 調査→見積もり→実装→テスト
        person_in_charge:
          type: string
          example: 山田太郎
        board_id:
          type: string
          format: components
          example: 機能を実装する
        created_at:
          type: string
          format: date
          readOnly: true
          example: '2000-01-01T00:00:00.000000Z'
        updated_at:
          type: string
          format: date
          readOnly: true
          example: '2000-01-01T00:00:00.000000Z'
        deleted_at:
          type: string
          format: date
          readOnly: true
          example: null

    Board:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: 開発関連のボード
        description:
          type: string
          readOnly: true
          example: 
        subscription_id:
          type: integer
          format: int64
          readOnly: true
          example: 2
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: "2000-01-01T00:00:00.000000Z"